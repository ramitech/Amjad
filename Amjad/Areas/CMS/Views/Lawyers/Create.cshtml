@model Amjad.Models.Lawyer

@{
 
}



<div class="row">
	<div class="col-md-12">
		<div class="portlet box green ">
			<div class="portlet-title">
				<div class="caption">
					<i class="fa fa-gift"></i> إضافة
				</div>
			</div>
			<div class="portlet-body">
				<div class="table-toolbar">
					<div class="row">
						<div class="col-md-6">
							<div class="btn-group">
								<a class="btn green" href="@Url.Action("Index")">
									<i class='fa fa-undo'></i> الرجوع
								</a>
							</div>
						</div>
					</div>
				</div>
				@using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal", @role = "form", action = "", enctype = "multipart/form-data" }))
				{
					@Html.AntiForgeryToken()
							@Html.ValidationSummary(true, "", new { @class = "text-danger" })
					<div class="form-body">
							<div class="form-group">
								@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.About, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.About, new { @class = "form-control", @rows = 5 })
                                    @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                                </div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <input type="file" name="img" class="form-control" />
                                    @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                                </div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.FaceBook, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.FaceBook, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.FaceBook, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.Twitter, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.Twitter, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.Twitter, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.Google, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.Google, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.Google, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.LinkedIn, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.LinkedIn, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.LinkedIn, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.Pinterest, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.Pinterest, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.Pinterest, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.Instagram, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.Instagram, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.Instagram, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.Skype, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.EditorFor(model => model.Skype, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.Skype, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group" style="display:none">
								@Html.LabelFor(model => model.LangId, htmlAttributes: new { @class = "control-label col-md-2" })
								<div class="col-md-10">
									@Html.DropDownList("LangId", null, htmlAttributes: new { @class = "form-control input-sm" })
									@Html.ValidationMessageFor(model => model.LangId, "", new { @class = "text-danger" })
								</div>
							</div>

						

					</div>
					<div class="form-actions">
						<div class="row">
							<div class="col-md-offset-2 col-md-10">
								<input type="submit" class="btn green" value="إضافة" />
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
</div>


@section jsCode {
    @Scripts.Render("~/bundles/jqueryval")
}
