<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
 
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}


<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>
<div class="row">
	<div class="col-md-12">
		<div class="portlet box green ">
			<div class="portlet-title">
				<div class="caption">
					<i class="fa fa-gift"></i> إضافة
				</div>
			</div>
			<div class="portlet-body">
				<div class="table-toolbar">
					<div class="row">
						<div class="col-md-6">
							<div class="btn-group">
								<a class="btn green" href="@Url.Action("Index")">
									<i class='fa fa-undo'></i> الرجوع
								</a>
							</div>
						</div>
					</div>
				</div>
				@using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal", @role = "form", action = "" }))
				{
					@Html.AntiForgeryToken()
<# 
						if (isControlHtmlAttributesSupported) {
#>
							@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
						} else {
#>
							@Html.ValidationSummary(true)
<#      
						}
#>
					<div class="form-body">
<#
					foreach (PropertyMetadata property in ModelMetadata.Properties) {
						if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

							// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
							if (property.IsPrimaryKey && IsPropertyGuid(property)) {
								continue;
							}

#>
							<div class="form-group">
<#
							if (property.IsForeignKey) {
#>
								@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
							} else {
#>
								@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
							}
#>
								<div class="col-md-10">
<#
							bool isCheckbox = property.TypeName.Equals(boolType);
							if (property.IsForeignKey) {
#>
<# 
								if (isControlHtmlAttributesSupported) {
#>
									@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control input-sm" })
<#
								} else {
#>
									@Html.DropDownList("<#= property.PropertyName #>", String.Empty, htmlAttributes: new { @class = "form-control input-sm" })
<#
								}
#>
<#
							} else  if (isControlHtmlAttributesSupported) {
								if (isCheckbox) {
#>
									<div class="checkbox">
<#
									PushIndent("    ");
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
								} else if (property.IsEnum && !property.IsEnumFlags) {
#>
									@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control input-sm" })
<#
								} else {
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
								} 
							} else {
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
							}
#>
<# 
							if (isControlHtmlAttributesSupported) {
#>
									@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
							} else {
#>
									@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
							}
#>
<#
							if (isCheckbox && isControlHtmlAttributesSupported) {
								PopIndent();
#>
									</div>
<#
							}
#>
								</div>
							</div>

<#
						}
					}
#>
					</div>
					<div class="form-actions">
						<div class="row">
							<div class="col-md-offset-2 col-md-10">
								<input type="submit" class="btn green" value="إضافة" />
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section jsCode {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

@section jsPlugins
{
	<script src="~/Scripts/jquery.validate.min.js"></script>
	<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>